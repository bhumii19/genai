import numpy as np
import matplotlib.pyplot as plt

image = np.random.rand(28, 28)
plt.imshow(image, cmap='gray')
plt.title("Step 0: Noise")
plt.show()

for step in range(1, 4):
    image = image * 0.9  # reduce noise
    plt.imshow(image, cmap='gray')
    plt.title(f"Step {step}: Denoising")
    plt.show()

THEORY -
Hereâ€™s the related theory and explanation for your **Diffusion Denoising simulation code**:

---

### 1. What is Diffusion in Generative AI?

* Diffusion models (like **Stable Diffusion, DDPM**) generate data (e.g., images) by learning to **reverse a noising process**.
* Process has two stages:

  1. **Forward Process:** Gradually add noise to an image until it becomes pure noise.
  2. **Reverse Process (Denoising):** Train a neural network to remove noise step by step, reconstructing the original image.

---

### 2. About the Code

1. **Initial Random Noise**

   ```python
   image = np.random.rand(28, 28)
   plt.imshow(image, cmap='gray')
   ```

   * Creates a random **28Ã—28 grayscale image** (like an MNIST digit but pure noise).
   * Represents the **starting noise** in diffusion models.

2. **Denoising Simulation**

   ```python
   for step in range(1, 4):
       image = image * 0.9  # reduce noise
       plt.imshow(image, cmap='gray')
       plt.title(f"Step {step}: Denoising")
       plt.show()
   ```

   * Each step multiplies pixel intensities by `0.9`.
   * This makes the image gradually darker (less noisy).
   * Simulates the **progressive denoising process** in diffusion models.

---

### 3. Output Explanation

* **Step 0:** Random noisy image.
* **Step 1, 2, 3:** Gradual reduction of pixel values â†’ looks like noise is fading away.
* In real diffusion models, instead of just scaling values, a neural network learns to **predict and subtract noise** at each step.

---

### 4. Why This is Important in Generative AI

* Diffusion models generate **high-quality, realistic images** by reversing noise.
* They outperform GANs in diversity and stability.
* Used in **Stable Diffusion, DALLÂ·E 2, Imagen** for text-to-image generation.

---

### 5. Key Note

* Your simulation is a **simplified toy version** (multiplying by `0.9`).
* Real diffusion denoising uses:

  $$
  x_{t-1} = \frac{1}{\sqrt{\alpha_t}} \Big( x_t - \frac{1-\alpha_t}{\sqrt{1-\bar{\alpha_t}}} \epsilon_\theta(x_t, t) \Big) + \sigma_t z
  $$

  where the neural net **predicts noise** (`ÎµÎ¸`) and removes it step by step.

---

ðŸ‘‰ Would you like me to modify your code to show a **side-by-side comparison** of forward process (adding noise) and reverse process (denoising), similar to how real diffusion models work?
